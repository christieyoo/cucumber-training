{"title":"Cucumber Training","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"Start learning Cucumber/Ruby/Capybara","content":" Copyright © 2016 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","url":"/.","children":[{"children":[{"title":"Getting Started","description":"Getting Started","layout":"guide","icon":"arrow-right-rod","weight":1,"content":" Setup Environment Install Ruby version 2.3 Mac OS: brew install ruby Windows: You will also need to install Ruby DevKit Ubuntu: See the README at https://github.com/liferay/liferay-qa-ee/tree/master/testray Install gems gem install selenium-webdriver cucumber capybara rspec Get chromedriver Mac OS: brew install chromedriver Other OS: download from https://sites.google.com/a/chromium.org/chromedriver/downloads References These are some very helpful websites you should bookmark in your browser. Cucumber wiki Capybara docs More Capybara docs Capybara cheat sheet Ruby tutorial Ruby docs/tutorial RegEx learning tool CSS selector reference ","srcFilePath":"src/pages/docs/getting-started.md","url":"/docs/getting-started.html"},{"title":"Cucumber","description":"Cucumber description","layout":"guide","icon":"flash","weight":2,"content":" References Cucumber wiki Goals Explore BDD (Behavior Driven Development) concepts What is it? What are some benefits of using BDD? Understand these components of a cucumber test: Feature Scenario Step Step Definition Be able to run a cucumber test. Reading Cucumber introduction Why use BDD? Feature Gherkin Given-When-Then Step Definitions Exercises In the following exercises, you will be writing the test steps in the .feature file. At this stage, you are not writing the step definitions. To begin: Create a 'cucumber-practice' folder. Go to the command line and run cucumber --init from this directory. Create a file called 'practice.feature' in the feature directory. Write these scenarios in practice.feature. Each scenario should contain at least one of each [Given-When-Then]. Write a scenario that signs the test user in to LESA. (Your trainer will show you the manual steps for doing this.) Write a scenario that does a google search for 'Liferay', then navigates to Liferay home page by clicking on the correct search result. Run the cucumber scenarios: Add the following to env.rb require 'selenium-webdriver' require 'rubygems' require 'capybara' require 'capybara/cucumber' Capybara.register_driver :selenium do |app| Capybara::Selenium::Driver.new(app, :browser = :chrome) end Capybara.default_driver = :selenium At the command line, run cucumber features. What output do you see in the terminal? ","srcFilePath":"src/pages/docs/cucumber.md","url":"/docs/cucumber.html"},{"title":"Capybara","description":"Capybara description","layout":"guide","icon":"code-file","weight":3,"content":" References Capybara docs More Capybara docs Capybara cheat sheet Goals Be able to configure basic Capybara settings in env.rb Become familiar with Capybara DSL. Understand how to do assertions using Capybara/RSpec. Write a simple test using Capybara. Reading Tips on improving tests with capybara test test test Tips for writing better cucumber steps Exercises For the scenarios you've already written, write the step definitions using Capybara DSL. Use RSpec matchers for the assertions (Then steps). ","srcFilePath":"src/pages/docs/capybara.md","url":"/docs/capybara.html"},{"title":"Ruby","description":"Ruby description","layout":"guide","icon":"code-file","weight":4,"content":" References Ruby tutorial Ruby docs/tutorial RegEx learning tool CSS selector reference Goals Get to know basic Ruby syntax. Be able to write code using conditional logic and loops. Know how to to loop through contents of a cucumber table. Understand basic object oriented concepts (i.e. classes, inheritance, etc. ) Understand basic page object design. What are the advantages of using page objects? Reading Page object pattern Acceptance tests with page objects Exercises Write the scenarios and step definitions for Exercises 1 and 2. Exercise 1 Sign in to https://www-support-2.liferay.com/group/customer Navigate to LESA Search page Do a keyword search for \"QAPROJECT1\" Assert that 1 or more result rows are displayed Print to console the number of tickets found Exercise 2 Same as above, except steps 3 to 5 will be repeated for multiple projects: Use a cucumber table in the feature file and use the table methods to loop through each of those projects. QAPROJECT1 QAPROJECT2 THESPACEPRO Exercise 3 Create a page object for the LESA Search page. Include \"element locator\" and \"action\" methods you need from the previous exercise. Refactor the step definitions from the previous exercise to use the page object. Bonus Can you figure out how to use cucumber tags to run a single scenario? ","srcFilePath":"src/pages/docs/ruby.md","url":"/docs/ruby.html"},{"title":"Search","description":"Documentation search results.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of Electric. ","srcFilePath":"src/pages/docs/search.soy","url":"/docs/search.html"}],"title":"Docs","description":"Documentation description","content":" Docs Start learning how to leverage the power of Cucumber in your project. Search Choose a Guide ","srcFilePath":"src/pages/docs/index.soy","url":"/docs"}]},"repo":"christieyoo/cucumber-training"}